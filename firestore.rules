rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Owner';
    }

    function isAdmin() {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return userRole == 'Admin' || userRole == 'Owner';
    }

    function isAuthor() {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return userRole == 'Author' || isAdmin();
    }
    
    function isMember() {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return userRole == 'Member' || isAuthor();
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Collection: users
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn(); // Handled by auth triggers/functions
      allow update: if (isUser(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'favoriteCars', 'favoriteBusinesses', 'lastLogin'])) || isAdmin();
      allow delete: if isAdmin();
    }

    // Collection: businesses
    match /businesses/{businessId} {
      allow read: if resource.data.verified == true || (isSignedIn() && request.auth.uid == resource.data.ownerId) || isAdmin();
      allow create: if isMember();
      allow update: if (isSignedIn() && request.auth.uid == resource.data.ownerId) || isAdmin();
      allow delete: if (isSignedIn() && request.auth.uid == resource.data.ownerId) || isAdmin();
    }
    
    // Collection: cars
    match /cars/{carId} {
      allow read: if true;
      allow create: if isAuthor();
      allow update, delete: if isAdmin();
    }
    
    // Collection: blogPosts
    match /blogPosts/{postId} {
      allow read: if true;
      allow create: if isAuthor();
      allow update: if isAuthor() && (request.auth.uid == resource.data.authorId || isAdmin());
      allow delete: if isAuthor() && (request.auth.uid == resource.data.authorId || isAdmin());
    }

    // Collection: activities
    match /activities/{activityId} {
      allow read, write: if isAdmin(); // Only admins can read/write activity logs directly
      allow create: if true; // Allow system to log activities
    }
    
    // Collection: questions
    match /questions/{questionId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update: if (isSignedIn() && request.auth.uid == resource.data.authorId) || isAdmin();
        allow delete: if isAdmin();
    }
    
    // Collection: comments
    match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if (isSignedIn() && request.auth.uid == resource.data.authorId) || isAdmin();
    }

    // Collection: reviews
    match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow delete: if (isSignedIn() && request.auth.uid == resource.data.userId) || isAdmin();
    }
    
    // Collection: categories
    match /categories/{categoryId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    // Collection: settings
    match /settings/{settingId} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}